
// overrides.compat.js ‚Äî –ø–∞—Ç—á–∏ –±–µ–∑ ES-–º–æ–¥—É–ª–µ–π, –≥—Ä—É–∑–∏—Ç—å –ü–û–°–õ–ï legacy.base.js

(function(){
  // --- –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ ---
  window.GameData = window.GameData || {};
  window.gameState = window.gameState || { player: { derivedStats:{}, hp:50, maxHp:50, mp:30, maxMp:30, gold: 20 } };
  window.DOMElements = window.DOMElements || {};

  // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ ---
  gameState.equipped = gameState.equipped || {};
  if (!('bag' in gameState.equipped)) gameState.equipped.bag = null;
  if (!('isBusy' in gameState)) gameState.isBusy = false;
  if (!('isResting' in gameState)) gameState.isResting = false;
  if (!('isPlayerTurn' in gameState)) gameState.isPlayerTurn = true;
  if (!('inventoryBaseCapacity' in gameState)) gameState.inventoryBaseCapacity = 10;

  // --- UI: —Å–ª–æ—Ç —Å—É–º–∫–∏ ---
  function injectBagSlot() {
    const bagSpanId = 'eq-bag';
    if (!document.getElementById(bagSpanId)) {
      const eqBox = document.getElementById('equipped-slots');
      if (eqBox) {
        const div = document.createElement('div');
        div.className = 'equipment-slot';
        div.dataset.slot = 'bag';
        div.innerHTML = `<span class="slot-icon">üéí</span><span id="${bagSpanId}" data-slottype="bag">–°—É–º–∫–∞: (–ü—É—Å—Ç–æ)</span>`;
        eqBox.appendChild(div);
      }
    }
    GameData.slotIcons = GameData.slotIcons || {};
    GameData.slotIcons.bag = GameData.slotIcons.bag || 'üéí';
    DOMElements.equippedSlots = DOMElements.equippedSlots || {};
    DOMElements.equippedSlots.bag = document.getElementById(bagSpanId);
    DOMElements.equippedSlotElements = DOMElements.equippedSlotElements || {};
    DOMElements.equippedSlotElements.bag = document.querySelector('.equipment-slot[data-slot="bag"]');
  }

  // --- –ò–∫–æ–Ω–∫–∏ PNG —Å —Ñ–æ–ª–±—ç–∫–æ–º ---
  function createItemIconNode(item) {
    const wrap = document.createElement('div');
    wrap.className = 'item-icon';
    const img = new Image();
    img.alt = item.name;
    img.style.display = 'none';
    img.onload = () => { wrap.innerHTML=''; img.style.display='block'; wrap.appendChild(img); };
    img.onerror = () => { wrap.innerHTML = `<i>${item.icon || '‚¨ú'}</i>`; };
    img.src = `assets/items/${item.id}.png`;
    wrap.innerHTML = `<i>${item.icon || '‚¨ú'}</i>`;
    return wrap;
  }
  function patchInventoryIcons(){
    if (!window.updateInventoryDisplay) return;
    const originalUpdate = window.updateInventoryDisplay;
    window.updateInventoryDisplay = function() {
      originalUpdate();
      const nodes = document.querySelectorAll('.inventory-item');
      nodes.forEach(node => {
        const spanName = node.querySelector('span');
        const i = node.querySelector('i');
        if (!i || !spanName) return;
        const invId = node.dataset.instanceId && Number(node.dataset.instanceId);
        const itemInState = (gameState.inventory||[]).find(it => it.instanceId === invId);
        const full = itemInState ? GameData.items[itemInState.id] : null;
        if (!full) return;
        const iconNode = createItemIconNode(full);
        i.replaceWith(iconNode);
      });
    };
  }

  // --- –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å + —Å—É–º–∫–∞ ---
  function getBagBonusSlots() {
    if (!gameState.equipped || !gameState.equipped.bag) return 0;
    const it = GameData.items[gameState.equipped.bag.itemId];
    return (it && it.invSlotsBonus) || 0;
  }
  function getInventoryCapacity() {
    return (gameState.inventoryBaseCapacity || 10) + getBagBonusSlots();
  }
  function getUsedSlots() {
    let slots = 0;
    const stacks = {};
    (gameState.inventory||[]).forEach(it => {
      const def = GameData.items[it.id];
      if (def && def.stackable) stacks[it.id] = true;
      else slots += 1;
    });
    return slots + Object.keys(stacks).length;
  }
  function hasFreeSlotFor(itemDef) {
    const willUseSlot = !(itemDef.stackable && (gameState.inventory||[]).some(i => i.id === itemDef.id));
    return !willUseSlot || getUsedSlots() < getInventoryCapacity();
  }
  (function(){
    const origAdd = window.addItem;
    if (origAdd) {
      window.addItem = function(item, quantity=1, forceInstanceId=null){
        if (!item) return origAdd(item, quantity, forceInstanceId);
        if (!hasFreeSlotFor(item)) {
          appendToLog(`‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –≤ —Ä—é–∫–∑–∞–∫–µ –¥–ª—è ${item.name}.`);
          return false;
        }
        return origAdd(item, quantity, forceInstanceId);
      }
    }
    const origUnequip = window.unequipItem;
    if (origUnequip) {
      window.unequipItem = function(slotName){
        if (slotName === 'bag') {
          const bag = gameState.equipped.bag && GameData.items[gameState.equipped.bag.itemId];
          if (bag) {
            const capNow = getInventoryCapacity();
            const capAfter = capNow - (bag.invSlotsBonus||0);
            if (getUsedSlots() > capAfter) {
              appendToLog('üéí –°–Ω–∞—á–∞–ª–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –≤ —Ä—é–∫–∑–∞–∫–µ, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å —Å—É–º–∫—É.');
              return false;
            }
          }
        }
        return origUnequip(slotName);
      };
    }
  })();

  // --- –ë–æ–π ---
  function rollWithVariance(base, variance = 0.15) {
    const min = base * (1 - variance);
    const max = base * (1 + variance);
    return Math.round(min + Math.random() * (max - min));
  }
  function applyDefense(raw, defense, minPercent = 0.15) {
    const reduced = raw - defense;
    const floorByPercent = Math.max(1, Math.floor(raw * minPercent));
    return Math.max(floorByPercent, Math.round(reduced));
  }
  (function(){
    const origStartCombat = window.startCombat;
    if (origStartCombat) {
      window.startCombat = function(enemyId){
        if (gameState.isCombatActive || gameState.isBusy) {
          appendToLog('‚ö†Ô∏è –¢—ã —É–∂–µ –∑–∞–Ω—è—Ç –∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –±–æ–π.');
          return;
        }
        gameState.isPlayerTurn = true;
        return origStartCombat(enemyId);
      };
    }
    window.playerTurnCombat = function(enemy) {
      if (!gameState.isCombatActive || !gameState.isPlayerTurn) return;
      gameState.isPlayerTurn = false;
      let playerDamage = rollWithVariance(gameState.player.derivedStats.physAttack, 0.15);
      const isCrit = Math.random() * 100 < (gameState.player.derivedStats.critChance||0);
      if (isCrit) {
        playerDamage = Math.round(playerDamage * 1.5);
        appendToLog('‚≠ê –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!');
      }
      const eff = applyDefense(playerDamage, enemy.defense, 0.15);
      enemy.hp -= eff;
      appendToLog(`–¢—ã –Ω–∞–Ω–æ—Å–∏—à—å ${eff} —É—Ä–æ–Ω–∞ –ø–æ ${enemy.name}. (HP –≤—Ä–∞–≥–∞: ${Math.max(0, enemy.hp)})`);
      updatePlayerInfo();
      if (enemy.hp <= 0) {
        endCombat(true, enemy);
      } else {
        gameState.currentCombatInterval = setTimeout(()=>enemyTurnCombat(enemy), 800);
      }
    };
    window.enemyTurnCombat = function(enemy) {
      if (!gameState.isCombatActive || gameState.player.hp <= 0) return;
      let enemyDamage = rollWithVariance(enemy.attack, 0.15);
      const isDodged = Math.random() * 100 < (gameState.player.derivedStats.dodgeChance||0);
      if (isDodged) {
        appendToLog(`–¢—ã —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏ ${enemy.name}!`);
      } else {
        const eff = applyDefense(enemyDamage, gameState.player.derivedStats.defense, 0.15);
        gameState.player.hp -= eff;
        appendToLog(`${enemy.name} –±—å—ë—Ç –Ω–∞ ${eff} —É—Ä–æ–Ω–∞. (–¢–≤–æ–∏ HP: ${Math.max(0, gameState.player.hp)})`);
      }
      updatePlayerInfo();
      if (gameState.player.hp <= 0) {
        endCombat(false, enemy);
      } else if (enemy.hp > 0) {
        gameState.isPlayerTurn = true;
      }
    };
  })();

  // --- –û—Ç–¥—ã—Ö —É –∫–æ—Å—Ç—Ä–∞ ---
  function wireCampRest() {
    const camp = GameData.locations && GameData.locations['–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ª–∞–≥–µ—Ä—å'];
    if (camp) {
      camp.actions = [{ text:'–û—Ç–¥–æ—Ö–Ω—É—Ç—å —É –∫–æ—Å—Ç—Ä–∞', func:'startRestAtCamp' }];
    }
    window.startRestAtCamp = function() {
      if (gameState.isCombatActive || gameState.isBusy || gameState.isResting) {
        appendToLog('‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞.');
        return;
      }
      gameState.isResting = true;
      gameState.isBusy = true;
      let secs = 300;
      appendToLog('–¢—ã –ª–µ–≥ —É –∫–æ—Å—Ç—Ä–∞. –û—Ç–¥—ã—Ö (5:00)‚Ä¶');

      DOMElements.actionButtonsDiv.innerHTML = '';
      const standBtn = document.createElement('button');
      standBtn.textContent = '–í—Å—Ç–∞—Ç—å';
      standBtn.onclick = () => stopRestingAtCamp(false);
      DOMElements.actionButtonsDiv.appendChild(standBtn);

      gameState.restTimerId = setInterval(() => {
        secs--;
        if (secs % 10 === 0 || secs < 10) {
          const m = Math.floor(secs/60), s = String(secs%60).padStart(2,'0');
          appendToLog(`–û—Ç–¥—ã—Ö‚Ä¶ ${m}:${s}`);
        }
      }, 1000);

      gameState.restTimeoutId = setTimeout(() => {
        stopRestingAtCamp(true);
      }, 300000);
    };

    window.stopRestingAtCamp = function(complete) {
      if (!gameState.isResting) return;
      clearInterval(gameState.restTimerId);
      clearTimeout(gameState.restTimeoutId);
      gameState.restTimerId = null;
      gameState.restTimeoutId = null;
      if (complete) {
        gameState.player.hp = gameState.player.maxHp;
        gameState.player.mp = gameState.player.maxMp;
        appendToLog('–¢—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è —É –∫–æ—Å—Ç—Ä–∞.');
      } else {
        appendToLog('–¢—ã –ø—Ä–µ—Ä–≤–∞–ª –æ—Ç–¥—ã—Ö.');
      }
      gameState.isResting = false;
      gameState.isBusy = false;
      updateGameScene();
    };
  }

  // --- –ö–∞—Ä—Ç–∞: –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ ---
  function patchMap() {
    if (!window.updateMapDisplay) return;
    window.updateMapDisplay = function() {
      try {
        DOMElements.mapCurrentLocation.textContent = GameData.locations[gameState.currentLocation].name;
      } catch(e) {}
      const container = DOMElements.mapLocationButtons || document.getElementById('map-location-buttons') || document.querySelector('.map-location-buttons');
      if (!container) return;
      container.innerHTML = '';
      Object.keys(GameData.locations)
        .filter(id => id !== gameState.currentLocation)
        .sort((a,b)=> GameData.locations[a].name.localeCompare(GameData.locations[b].name,'ru'))
        .forEach(locId => {
          const btn = document.createElement('button');
          btn.textContent = `–ü–µ—Ä–µ–π—Ç–∏: ${GameData.locations[locId].name}`;
          btn.onclick = () => { moveTo(locId); showScreen('game-play-screen'); };
          container.appendChild(btn);
        });
    };
  }

  // --- –ü–µ—â–µ—Ä–∞ –∏ –ê—Ä–µ–Ω–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã/–º–∞–≥–∞–∑–∏–Ω ---
  function addContent() {
    // items
    const items = GameData.items || (GameData.items={});
    items['ragged_pouch'] = items['ragged_pouch'] || { id:'ragged_pouch', name:'–°—Ç–∞—Ä—ã–π —Ä–≤–∞–Ω—ã–π –º–µ—à–æ–∫', icon:'üß∂', type:'bag', slot:'bag', description:'+4 —Å–ª–æ—Ç–∞ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é.', value:25, invSlotsBonus:4, actions:['equip','sell'] };
    items['leather_bag']  = items['leather_bag']  || { id:'leather_bag',  name:'–ö–æ–∂–∞–Ω–∞—è —Å—É–º–∫–∞', icon:'üëú', type:'bag', slot:'bag', description:'+8 —Å–ª–æ—Ç–æ–≤ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é.', value:80, invSlotsBonus:8, actions:['equip','sell'] };
    items['lockpick']     = items['lockpick']     || { id:'lockpick',     name:'–û—Ç–º—ã—á–∫–∞', icon:'üóùÔ∏è', type:'tool', value:5, stackable:true, actions:['use','sell'] };

    // shops
    GameData.shops = GameData.shops || {};
    const city = GameData.shops['city_shop'] || (GameData.shops['city_shop'] = {id:'city_shop', name:'–ì–æ—Ä–æ–¥—Å–∫–∞—è –ª–∞–≤–∫–∞', items:[]});
    const ensure = (id, price, stock)=>{ if (!city.items.some(x=>x.itemId===id)) city.items.push({itemId:id, price, stock}); };
    ensure('ragged_pouch', 30, 5);
    ensure('leather_bag', 100, 3);
    ensure('lockpick', 7, 20);

    // locations
    const L = GameData.locations || (GameData.locations={});
    L['–ü–µ—â–µ—Ä–∞'] = L['–ü–µ—â–µ—Ä–∞'] || { name:'–ü–µ—â–µ—Ä–∞', description:'–°—ã—Ä–æ–π –≤–æ–∑–¥—É—Ö –∏ —ç—Ö–æ —à–∞–≥–æ–≤. –£–∑–∫–∏–π –ª–∞–∑ –∏ —à–∏—Ä–æ–∫–∏–π –≥—Ä–æ—Ç.', actions:[{text:'–ò–¥—Ç–∏ –≤ –ª–∞–∑', func:'caveGo', param:'tunnel'},{text:'–û—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–æ—Ç', func:'caveGo', param:'grotto'},{text:'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –®–∞—Ö—Ç—É', func:'moveTo', param:'–®–∞—Ö—Ç–∞'}], connections:['–®–∞—Ö—Ç–∞'], background:'assets/backgrounds/cave.jpg' };
    if (L['–®–∞—Ö—Ç–∞'] && Array.isArray(L['–®–∞—Ö—Ç–∞'].connections) && !L['–®–∞—Ö—Ç–∞'].connections.includes('–ü–µ—â–µ—Ä–∞')) L['–®–∞—Ö—Ç–∞'].connections.push('–ü–µ—â–µ—Ä–∞');

    L['–ê—Ä–µ–Ω–∞'] = L['–ê—Ä–µ–Ω–∞'] || { name:'–ê—Ä–µ–Ω–∞', description:'–®—É–º —Ç–æ–ª–ø—ã –∏ –∑–≤–æ–Ω –º–µ—Ç–∞–ª–ª–∞.', actions:[{text:'–°–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –±–æ–π', func:'watchArenaFight'},{text:'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–æ—Ä–æ–¥', func:'moveTo', param:'–ì–æ—Ä–æ–¥'}], connections:['–ì–æ—Ä–æ–¥'], background:'assets/backgrounds/arena.jpg' };
    if (L['–ì–æ—Ä–æ–¥'] && Array.isArray(L['–ì–æ—Ä–æ–¥'].connections) && !L['–ì–æ—Ä–æ–¥'].connections.includes('–ê—Ä–µ–Ω–∞')) L['–ì–æ—Ä–æ–¥'].connections.push('–ê—Ä–µ–Ω–∞');
  }

  function watchArenaFight(){} // placeholder to satisfy linter; real defined below

  // --- –ê—Ä–µ–Ω–∞ ---
  function registerArena(){
    window.watchArenaFight = function(){
      if (gameState.isBusy || gameState.isCombatActive) { appendToLog('‚ö†Ô∏è –ó–∞–Ω—è—Ç.'); return; }
      const A = rollFighterNearPlayer('–ì–ª–∞–¥–∏–∞—Ç–æ—Ä –ê');
      const B = rollFighterNearPlayer('–ì–ª–∞–¥–∏–∞—Ç–æ—Ä –ë');
      appendToLog(`–ù–∞ –∞—Ä–µ–Ω—É –≤—ã—Ö–æ–¥—è—Ç ${A.name} –∏ ${B.name}!`);
      let turn = 0;
      while (A.hp>0 && B.hp>0 && turn<100) {
        const atk = turn%2===0?A:B, def = turn%2===0?B:A;
        let dmg = rollWithVariance(atk.attack, 0.15);
        if (Math.random()*100 < 10) dmg = Math.round(dmg*1.5);
        const eff = applyDefense(dmg, def.defense, 0.15);
        def.hp -= eff;
        turn++;
      }
      const winner = A.hp>0?A:B;
      appendToLog(`–ü–æ–±–µ–¥–∏–ª ${winner.name}!`);
    };
    function rollFighterNearPlayer(name) {
      const p = (gameState.player && gameState.player.derivedStats) || { maxHp:50, physAttack:5, defense:2 };
      return {
        name,
        hp: Math.round((p.maxHp||50) * (0.7 + Math.random()*0.6)),
        attack: Math.round((p.physAttack||5) * (0.8 + Math.random()*0.5)),
        defense: Math.round((p.defense||2) * (0.8 + Math.random()*0.5)),
      };
    }
  }

  // --- –ö–∞—Ä—Ç–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ ---
  function hookShowMap(){
    const origShow = window.showScreen;
    if (!origShow) return;
    window.showScreen = function(screen){
      const res = origShow(screen);
      if (screen === 'map-screen' && window.updateMapDisplay) {
        setTimeout(()=>updateMapDisplay(), 0);
      }
      return res;
    };
  }

  // --- –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ ---
  window.addEventListener('load', function(){
    injectBagSlot();
    patchInventoryIcons();
    addContent();
    wireCampRest();
    patchMap();
    registerArena();
    hookShowMap();
    try { updateGameScene && updateGameScene(); } catch(e){}
    try { updateMapDisplay && updateMapDisplay(); } catch(e){}
  });
})();
